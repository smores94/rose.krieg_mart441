!function(t,e){"use strict";

    // Helper function to define properties
    var i=function(t,e,i){
      e && Object.defineProperties(t,e);
      i && Object.defineProperties(t.prototype,i);
    };
  
    // Main Chromata class
    var n=function(){
      function t(t){
        var i,n=this,r=arguments[1]===e?{}:arguments[1];
  
        // Create canvases
        var o=document.createElement("canvas"),
            s=o.getContext("2d"),
            a=document.createElement("canvas"),
            u=a.getContext("2d"),
            l=new Image,
            c=!1;
  
        o.setAttribute("id","chromataCanvas");
        this.options=this._mergeOptions(r);
  
        l.crossOrigin="Anonymous";
        l.addEventListener("load",function(){
          i=h._getOutputDimensions(t,n.options.outputSize);
          a.width = o.width = i.width;
          a.height = o.height = i.height;
          u.drawImage(l,0,0,i.width,i.height);
          n.dimensions=i;
          n.imageArray=h._getImageArray(u);
          n.workingArray=h._getWorkingArray(u);
          c=!0;
        });
        l.src=t.src;
  
        this.loader=function(t){
          c?t():setTimeout(function(){return n.loader(t)},50);
        };
  
        this.imageArray=[];
        this.sourceImageElement=t;
        this.sourceContext=u;
        this.renderContext=s;
        this.isRunning=!1;
        this.iterationCount=0;
      }
  
      // Define static and prototype methods
      return i(t,null,{
        start:{value:function(){
          var t=this;
          this.loader(function(){
            t.isRunning=!0;
            void 0===t._tick?t._run():t._tick();
          });
        },writable:!0,enumerable:!0,configurable:!0},
  
        stop:{value:function(){
          return this.isRunning=!1,this.iterationCount;
        },writable:!0,enumerable:!0,configurable:!0},
  
        toggle:{value:function(){
          return this.isRunning?this.stop():this.start();
        },writable:!0,enumerable:!0,configurable:!0},
  
        reset:{value:function(){
          this.isRunning=!1;
          this._tick=e;
          cancelAnimationFrame(this.raf);
          this.renderContext.clearRect(0,0,this.dimensions.width,this.dimensions.height);
          this.workingArray=h._getWorkingArray(this.sourceContext);
          this._removeRenderCanvas();
        },writable:!0,enumerable:!0,configurable:!0},
  
        _mergeOptions:{value:function(t){
          var e={
            colorMode:"color",
            compositeOperation:"lighten",
            iterationLimit:0,
            key:"low",
            lineWidth:2,
            lineMode:"smooth",
            origin:["bottom"],
            outputSize:"original",
            pathFinderCount:30,
            speed:7,
            turningAngle:Math.PI
          },
          i={};
          for(var n in e)e.hasOwnProperty(n)&&(i[n]=t[n]||e[n]);
          i.origin=i.origin.constructor===Array?i.origin:e.origin;
          i.pathFinderCount=this._limitToRange(i.pathFinderCount,1,1e4);
          i.lineWidth=this._limitToRange(i.lineWidth,1,100);
          i.speed=this._limitToRange(i.speed,1,100);
          i.turningAngle=this._limitToRange(i.turningAngle,.1,10);
          return i;
        },writable:!0,enumerable:!0,configurable:!0},
  
        _limitToRange:{value:function(t,e,i){
          return Math.min(Math.max(t,e),i);
        },writable:!0,enumerable:!0,configurable:!0},
  
        _appendRenderCanvas:{value:function(){
          var t=this.sourceImageElement.parentNode;
          this.sourceImageElement.style.display="none";
          t.insertBefore(this.renderContext.canvas,this.sourceImageElement.nextSibling);
        },writable:!0,enumerable:!0,configurable:!0},
  
        _removeRenderCanvas:{value:function(){
          this.sourceImageElement.style.display="";
          this.renderContext.canvas.parentNode.removeChild(this.renderContext.canvas);
        },writable:!0,enumerable:!0,configurable:!0},
  
        _run:{value:function(){
          var t=this,e=[],i=this._initPathFinders(),
          n={
            colorMode:this.options.colorMode,
            lineWidth:this.options.lineWidth,
            lineMode:this.options.lineMode,
            speed:this.options.speed
          };
  
          this._appendRenderCanvas();
          this.renderContext.globalCompositeOperation=this.options.compositeOperation;
  
          i.forEach(function(i){
            e.push(new a(t.renderContext,i,n));
          });
  
          this._tick=function(){
            0<t.options.iterationLimit&&t.options.iterationLimit<=t.iterationCount&&(t.isRunning=!1,t.options.iterationLimit=0);
            e.forEach(function(t){return t.drawNextLine()});
            t.iterationCount++;
            t.isRunning&&(t.raf=requestAnimationFrame(t._tick));
          };
  
          this._tick();
        },writable:!0,enumerable:!0,configurable:!0},
  
        _initPathFinders:{value:function(){
          var t=this,e=[],i=this.options.pathFinderCount,
              n=this.options.origin,r=i/n.length,
              o={speed:this.options.speed,turningAngle:this.options.turningAngle,key:this.options.key};
  
          -1<n.indexOf("bottom")&&this._seedBottom(r,e,o);
          -1<n.indexOf("top")&&this._seedTop(r,e,o);
          -1<n.indexOf("left")&&this._seedLeft(r,e,o);
          -1<n.indexOf("right")&&this._seedRight(r,e,o);
  
          n.forEach(function(i){
            var n=i.match(/(\d{1,3})% (\d{1,3})%/);
            n && t._seedPoint(r,e,o,n[1],n[2]);
          });
  
          return e;
        },writable:!0,enumerable:!0,configurable:!0},
  
        // Additional seeding methods would go here...
  
      }),t
    }();
  
    t.Chromata=n;
  
  }(this);
  